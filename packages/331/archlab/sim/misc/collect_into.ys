# MUHAMMED ENES İZGİ
# 2310142
# SECTION 1

.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    irmovq array, %rsi
    irmovq $8, %rdx
    call collect_into
    halt

collect_into:
    pushq %rdi
    pushq %rsi
    pushq %rdx
    pushq %r8
    pushq %r9
    pushq %r10
    pushq %r11
    pushq %r12
null_check:
    rrmovq %rdi, %r8
    andq %r8, %r8
    je return_0
len_check:
    irmovq $0, %r9
    subq %r9, %rdx
    jle return_0
else:
    rrmovq %rdi, %r9 # rdi backup
    mrmovq 8(%rdi), %rdi
    call collect_into
    rrmovq %rax, %r8
    subq %rdx, %r8
    je return_final
    mrmovq (%r9), %r8

    pushq %rdi
    pushq %rax
    rrmovq %rax, %rdi
    call multiply
    addq %rax, %rsi
    rmmovq %r8, (%rsi)
    popq %rax
    popq %rdi

    mrmovq 16(%r9), %rdi # root = root->right
    irmovq $1, %r10
    irmovq $8, %r12
    addq %r12, %rsi
    subq %r10, %rdx
    subq %rax, %rdx
    rrmovq %rax, %r11
    call collect_into
    addq %r11, %rax
    addq %r10, %rax
    jmp return_final
return_0:
    irmovq $0, %rax
    jmp return_final
return_final:
    popq %r12
    popq %r11
    popq %r10
    popq %r9
    popq %r8
    popq %rdx
    popq %rsi
    popq %rdi
    ret

multiply:
    pushq %r8
    pushq %r9
    pushq %r10
    irmovq $8, %r8
    irmovq $0, %r9
    irmovq $1, %r10
    rrmovq %r9, %rax
    jmp check
loop:
    addq %r8, %rax
    subq %r10, %rdi 
check:
    subq %r9, %rdi
    jg loop
    popq %r10
    popq %r9
    popq %r8
    ret


# A sample eleven-element BST. Absolutely positioned
# to avoid confusion when debugging.
.pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0
    .quad 0
node5:
    .quad 5
    .quad 0 # Remember that 0 is null.
    .quad 0
node11:
    .quad 11
    .quad node8
    .quad 0
node8:
    .quad 8
    .quad 0
    .quad 0
node24:
    .quad 24
    .quad node19
    .quad node40
node19:
    .quad 19
    .quad 0
    .quad 0
node40:
    .quad 40
    .quad 0
    .quad node52
node52:
    .quad 52
    .quad 0
    .quad 0




# An array with size of 8 to put elements in:
# Make sure your code works correctly. Do not
# fill beyond the bounds of the array. You should
# see values in sorted order starting from the minimum
# of the BST, since the traversal is in-order.
.pos 0x400
array:
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0
    .quad 0

.pos 0x800
Stack:
